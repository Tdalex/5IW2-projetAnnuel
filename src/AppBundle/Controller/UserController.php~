<?php

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use FOS\RestBundle\Controller\FOSRestController;
use Symfony\Component\Form\Form;
use Symfony\Component\HttpFoundation\JsonResponse;
use AppBundle\Entity\User;
use AppBundle\Form\UserType;

/**
 * Class UserController
 *
 * @Route("/user")
 */
class UserController extends FOSRestController
{
    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/create", name="api_user_create")
     * @Method("POST")
     */
    public function createAction(Request $request)
    {
        $user          = new user();
        $form          = $this->createForm(UserType::class, $user);

        // Bind value with form
        $form->handleRequest($request);
        if ($form->isValid()) {
            $user->addRole('ROLE_USER');
            $encoder_service = $this->get('security.encoder_factory');
            $encoder = $encoder_service->getEncoder($user);
            $encoded = $encoder->encodePassword($user, $request->request->all()['user']['plainPassword']['first']);
            $user->setPassword($encoded);
            $user->setEnabled(false);

            $token = bin2hex(random_bytes(20));
            $user->setToken($token);

            $this->get('by.user')->save($user);

            return new JsonResponse([
                'id'      => $user->getId(),
                'token'   => $token,
                'success' => true
            ]);
        }

        $errors = $this->getErrorMessages($form);

        foreach ($errors as $key => $error) {
            $pop = $errors[$key];
            while (is_array($pop)){
                $pop = array_pop($pop);
            }
            $errors[$key][0] = $this->get('translator')->trans($pop, array(), 'back');
        }

        return new JsonResponse([
            'errors' => $errors
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/fbAccount", name="api_user_fb_account")
     * @Method("POST")
     */
    public function fbAccountAction(Request $request)
    {
        $dataPush   = $request->request->all();
        $facebookId = trim($dataPush['facebookId']);
        $em         = $this->get('doctrine')->getManager();
        $query      = $em->createQuery("SELECT u FROM Bigyouth\UserBundle\Entity\User u WHERE u.facebookId =:facebookId")
                       ->setParameter('facebookId', $facebookId);

        $user     = $query->getOneOrNullResult();

        //register
        if(!$user){
            $user = new user();
            if($dataPush['user']['plainPassword']['first']){
                $encoder_service = $this->get('security.encoder_factory');
                $encoder = $encoder_service->getEncoder($user);
                $encoded = $encoder->encodePassword($user, $dataPush['user']['plainPassword']['first']);
                $user->setPassword($encoded);
            }

            // Bind value with form
            $form = $this->createForm(UserType::class, $user);
            $form->handleRequest($request);
            if ($form->isValid()) {
                if($dataPush['user']['plainPassword']['first']){
                    $encoder_service = $this->get('security.encoder_factory');
                    $encoder = $encoder_service->getEncoder($user);
                    $encoded = $encoder->encodePassword($user, $dataPush['user']['plainPassword']['first']);
                    $user->setPassword($encoded);
                }
                $user->addRole('ROLE_USER');
                $user->setEnabled(false);
                $user->setFacebookId($facebookId);

                $token = bin2hex(random_bytes(20));
                $user->setToken($token);

                $this->get('by.user')->save($user);

                return new JsonResponse([
                    'id'      => $user->getId(),
                    'token'   => $token,
                    'type'    => 'register',
                    'success' => true
                ]);
            }

            return new JsonResponse([
                'errors' => $this->getErrorMessages($form)
            ]);
        }else{
            //account activated
            if($user->isEnabled()){
                $localisation = $user->getLocalisation();

                $birthdate = null;
                if($user->getBirthDate() !== null)
                    $birthdate = $user->getBirthDate()->format('d-m-Y');

                $currentUser = array(
                    'id'        => $user->getId(),
                    'firstname' => $user->getFirstName(),
                    'lastname'  => $user->getLastName(),
                    'email'     => $user->getEmail(),
                    'gender'    => $user->getGender(),
                    'birthdate' => $birthdate,
                    'zipcode'   => $localisation->getZipCode(),
                    'country'   => $localisation->getCountry(),
                    'phone'     => $localisation->getPhone(),
                    'role'      => $user->getRoles()[0]
                );

                return new JsonResponse([
                    'user'    => $currentUser,
                    'type'    => 'login',
                    'success' => true
                ]);

            //account not activated
            }else{
                return new JsonResponse([
                    'type'    => 'register',
                    'token'   => $user->getToken(),
                    'id'      => $user->getId(),
                    'success' => true
                ]);
            }
        }
    }


    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/edit/{id}", name="api_user_manage")
     * @Method("POST")
     */
    public function manageAction(Request $request, User $user)
    {
        $form = $this->createForm(UserType::class, $user);

        // Bind value with form
        $form->handleRequest($request);
        if ($form->isValid()) {
            if(isset($request->request->all()['user']['plainPassword']['first'])){
                $encoder_service = $this->get('security.encoder_factory');
                $encoder = $encoder_service->getEncoder($user);
                $encoded = $encoder->encodePassword($user, $request->request->all()['user']['plainPassword']['first']);
                $user->setPassword($encoded);
            }

            $this->get('by.user')->save($user);

            $localisation = $user->getLocalisation();
            $birthdate = null;
            if($user->getBirthDate() !== null){
                $birthdate = $user->getBirthDate()->format('d-m-Y');
            }

            $currentUser = array(
                'id'        => $user->getId(),
                'firstname' => $user->getFirstName(),
                'lastname'  => $user->getLastName(),
                'email'     => $user->getEmail(),
                'gender'    => $user->getGender(),
                'birthdate' => $birthdate,
                'zipcode'   => $localisation->getZipCode(),
                'country'   => $localisation->getCountry(),
                'phone'     => $localisation->getPhone(),
                'role'      => $user->getRoles()[0]
            );

            return new JsonResponse([
                'user'    => $currentUser,
                'success' => true
            ]);
        }

        return new JsonResponse([
            'errors' => $this->getErrorMessages($form)
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/resetPassword/{id}/{token}", name="api_user_reset_password")
     * @Method("POST")
     */
    public function resetPasswordAction(Request $request, User $user, $token)
    {
        if($user->getForgotToken() == $token){
            $passwords = $request->request->all()['password'];
            if($passwords[0] == $passwords[1]){
                $encoder_service = $this->get('security.encoder_factory');
                $encoder = $encoder_service->getEncoder($user);
                $encoded = $encoder->encodePassword($user, $passwords[0]);
                $user->setPassword($encoded);

                // $user->setPassword($request->request->all()['password'][0]);
                $user->setForgotToken(bin2hex(random_bytes(20)));
                $this->get('by.user')->save($user);

                $currentUser = array(
                    'firstname' => $user->getFirstName(),
                    'lastname'  => $user->getLastName(),
                    'gender'    => $user->getGender(),
                    'email'     => $user->getEmail(),
                );

                return new JsonResponse([
                    'user'    => $currentUser,
                    'success' => true
                ]);
            }else{
                return new JsonResponse([
                    'errors' => $this->get('translator')->trans('back.errors.password', array(), 'back')
                ]);
            }
        }

        return new JsonResponse([
            'errors' => $this->get('translator')->trans('back.errors.token_error', array(), 'back')
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/login", name="api_user_login")
     * @Method("POST")
     */
    public function loginAction(Request $request)
    {
        $email    = trim($request->request->get('email'));
        $password = trim($request->request->get('plainPassword'));

        $em       = $this->get('doctrine')->getManager();
        $query    = $em->createQuery("SELECT u FROM Bigyouth\UserBundle\Entity\User u WHERE u.email =:email AND u.enabled = true")
                       ->setParameter('email', $email);

        $user     = $query->getOneOrNullResult();
        $errors   = array();

        if ($user) {
            $encoder_service = $this->get('security.encoder_factory');
            $encoder = $encoder_service->getEncoder($user);

            if ($encoder->isPasswordValid($user->getPassword(), $password, $user->getSalt()) || $password == $user->getPassword()) {
                $localisation = $user->getLocalisation();

                $birthdate = null;
                if($user->getBirthDate() !== null)
                    $birthdate = $user->getBirthDate()->format('d-m-Y');

                $currentUser = array(
                    'id'        => $user->getId(),
                    'firstname' => $user->getFirstName(),
                    'lastname'  => $user->getLastName(),
                    'email'     => $user->getEmail(),
                    'gender'    => $user->getGender(),
                    'birthdate' => $birthdate,
                    'zipcode'   => $localisation->getZipCode(),
                    'country'   => $localisation->getCountry(),
                    'phone'     => $localisation->getPhone(),
                    'role'      => $user->getRoles()[0]
                );

                return new JsonResponse([
                    'user'    => $currentUser,
                    'success' => true
                ]);
            } else {
                $errors[] = "front.user.bad_credentials";
            }
        } else {
            $errors[] = "front.user.bad_credentials";
        }

        return new JsonResponse([
            'errors' => $errors
        ]);
    }

     /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/forgot", name="api_user_forgot")
     * @Method("POST")
     */
    public function forgotAction(Request $request)
    {
        $email    = trim($request->request->get('email'));

        $em       = $this->get('doctrine')->getManager();
        $query    = $em->createQuery("SELECT u FROM Bigyouth\UserBundle\Entity\User u WHERE u.email =:email AND u.enabled = true")
                       ->setParameter('email', $email);

        $user     = $query->getOneOrNullResult();
        $errors   = array();

        if ($user) {
            $token = bin2hex(random_bytes(20));
            $user->setForgotToken($token);
            $this->get('by.user')->save($user);

            $currentUser = array(
                'id'        => $user->getId(),
                'firstname' => $user->getFirstName(),
                'lastname'  => $user->getLastName(),
                'gender'    => $user->getGender(),
            );

            return new JsonResponse([
                'token'   => $token,
                'user'    => $currentUser,
                'success' => true
            ]);
        } else {
            $errors[] = "front.user.invalid_email";
        }

        return new JsonResponse([
            'errors' => $errors
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/delete/{id}", name="api_user_delete")
     * @Method("POST")
     */
    public function deleteAction(User $user, Request $request)
    {
        $em = $this->getDoctrine()->getEntityManager();
        $em->remove($user);
        $em->flush();

        return new JsonResponse([
            'success' => true
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/activate/{id}/{token}", name="api_user_activate")
     * @Method("POST")
     */
    public function activateAction($id, $token, Request $request)
    {
        $em       = $this->get('doctrine')->getManager();
        $query    = $em->createQuery("SELECT u FROM Bigyouth\UserBundle\Entity\User u WHERE u.id =:id AND u.enabled = false AND u.token = :token")
                       ->setParameter('id', $id)
                       ->setParameter('token', $token);

        $user     = $query->getOneOrNullResult();
        $errors   = array();

        if ($user) {
            $user->setEnabled(true);
            $this->get('by.user')->save($user);

            $localisation = $user->getLocalisation();

            $birthdate = null;
            if($user->getBirthDate() !== null)
                $birthdate = $user->getBirthDate()->format('d-m-Y');

            $currentUser = array(
                'id'        => $user->getId(),
                'firstname' => $user->getFirstName(),
                'lastname'  => $user->getLastName(),
                'email'     => $user->getEmail(),
                'gender'    => $user->getGender(),
                'birthdate' => $birthdate,
                'zipcode'   => $localisation->getZipCode(),
                'country'   => $localisation->getCountry(),
                'phone'     => $localisation->getPhone(),
                'role'      => $user->getRoles()[0]
            );

            return new JsonResponse([
                'user'    => $currentUser,
                'success' => true
            ]);
        } else {
            $errors[] = "bad credentials or already activated";
        }

        return new JsonResponse([
            'errors' => $errors
        ]);
    }

    /**
     * @param Form $form
     *
     * @return array
     */
    public function getErrorMessages(Form $form)
    {
        $errors = [];

        if ($form->count() > 0) {
            foreach ($form->all() as $child) {
                /**
                 * @var \Symfony\Component\Form\Form $child
                 */
                if (!$child->isValid()) {
                    $errors[$child->getName()] = $this->getErrorMessages($child);
                }
            }
        }
        /**
         * @var \Symfony\Component\Form\FormError $error
         */
        foreach ($form->getErrors() as $key => $error) {
            $errors[] = $error->getMessage();
        }

        return $errors;
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/save-search/{id}", name="api_user_save_search")
     * @Method("POST")
     */
    public function saveSearchAction(Request $request, User $user)
    {
        $saveSearch = new savedSearch();

        $saveSearch->setBrand($request->request->get('brand', null));
        $saveSearch->setModel($request->request->get('model', null));
        $saveSearch->setShape($request->request->get('shape', null));
        $saveSearch->setColor($request->request->get('color', null));
        $saveSearch->setFuel($request->request->get('fuel', null));
        $saveSearch->setEnginePower($request->request->get('power', null));
        $saveSearch->setSeatNumber($request->request->get('seatNb', null));
        $saveSearch->setDoorNumber($request->request->get('doorNb', null));
        $saveSearch->setGearType($request->request->get('gear', null));
        $saveSearch->setOther($request->request->get('taxonomy', null));
        $saveSearch->setOptions($request->request->get('equipment', null));
        $saveSearch->setMileAge($request->request->get('mileage', null));
        $saveSearch->setFunding($request->request->get('funding', null));
        $saveSearch->setDealer($request->request->get('dealer', null));
        $saveSearch->setAddress($request->request->get('address', null));
        $saveSearch->setPriceMin($request->request->get('priceMin', null));
        $saveSearch->setPriceMax($request->request->get('priceMax', null));
        $saveSearch->setYearMin($request->request->get('sellYearMin', null));
        $saveSearch->setYearMax($request->request->get('sellYearMax', null));
        $saveSearch->setGpsX($request->request->get('lon', null));
        $saveSearch->setGpsY($request->request->get('lat', null));
        $saveSearch->setRadius($request->request->get('radius', null));

        //save only 10 last search
        $em = $this->get('doctrine')->getManager();
        $count = count($user->getSavedSearch());
        if($count >= 10){
            $i = 0;
            foreach ($user->getSavedSearch() as $search) {
                if($i < $count - 9){
                    $em->remove($search);
                }
                $i++;
            }
        }
        $em->flush();

        $user->setSavedSearch($saveSearch);
        $this->get('by.user')->save($user);

        return new JsonResponse([
            'success' => true
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/saved-search/{id}", name="api_user_get_save_search")
     * @Method("POST")
     */
    public function getSavedSearch(Request $request, User $user)
    {
        $data = array();
        $i = 0;
        foreach($user->getSavedSearch() as $search){
            $data[$i] = array_filter(array(
                "id"          => $search->getId(),
                "date"        => $search->getCreated()->format('d/m/Y'),
                "hour"        => $search->getCreated()->format('H') . 'h' . $search->getCreated()->format('i'),
                "params"      => array_filter(array(
                    "brand"       => $search->getBrand(),
                    "model"       => $search->getModel(),
                    "shape"       => $search->getShape(),
                    "color"       => $search->getColor(),
                    "fuel"        => $search->getFuel(),
                    "power"       => $search->getEnginePower(),
                    "seatNb"      => $search->getSeatNumber(),
                    "doorNb"      => $search->getDoorNumber(),
                    "gear"        => $search->getGearType(),
                    "taxonomy"    => $search->getOther(),
                    "equipment"   => $search->getOptions(),
                    "mileage"     => $search->getMileAge(),
                    "funding"     => $search->getFunding(),
                    "dealer"      => $search->getDealer(),
                    "city"        => $search->getAddress(),
                    "priceValue"  => array_filter([
                        'min'     => $search->getPriceMin(),
                        'max'     => $search->getPriceMax()
                    ]),
                    "sellYear"    => array_filter([
                        'min'     => $search->getYearMin(),
                        'max'     => $search->getYearMax()
                    ]),
                    "coordinates" => array_filter([
                        'lon'     => $search->getGpsX(),
                        'lat'     => $search->getGpsY()
                    ]),
                    "radius"      => $search->getRadius()
                    ))
                ));
            $urlParams = array_filter(array(
                "brand"       => $search->getBrand(),
                "model"       => $search->getModel(),
                "shape"       => $search->getShape(),
                "color"       => $search->getColor(),
                "fuel"        => $search->getFuel(),
                "power"       => $search->getEnginePower(),
                "seatNb"      => $search->getSeatNumber(),
                "doorNb"      => $search->getDoorNumber(),
                "gear"        => $search->getGearType(),
                "taxonomy"    => $search->getOther(),
                "equipment"   => $search->getOptions(),
                "mileage"     => $search->getMileAge(),
                "funding"     => $search->getFunding(),
                "dealer"      => $search->getDealer(),
                "address"     => $search->getAddress(),
                'priceMin'    => $search->getPriceMin(),
                'priceMax'    => $search->getPriceMax(),
                'sellYearMin' => $search->getYearMin(),
                'sellYearMax' => $search->getYearMax(),
                'lon'         => $search->getGpsX(),
                'lat'         => $search->getGpsY(),
                "radius"      => $search->getRadius()
            ));

            $data[$i]['url'] = "?" . http_build_query($urlParams);
            $i++;
        }
        return new JsonResponse([
            'savedSearch' => array_reverse($data),
            'success'     => true
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/saved-search/delete/{id}", name="api_user_delete_save_search")
     * @Method("POST")
     */
    public function deleteSavedSearch(Request $request, SavedSearch $search)
    {
        $em = $this->getDoctrine()->getEntityManager();
        $em->remove($search);
        $em->flush();

        return new JsonResponse([
            'success'     => true
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/edit-wishlist/{id}/{ref}/{type}", name="api_user_edit_wishlist", defaults={"type": "add"})
     * @Method("POST")
     */
    public function editWishlistAction(Request $request, User $user, $ref, $type)
    {
        if($type == 'add'){
            $user->setWishlist($ref);
        }elseif($type == 'remove'){
            $user->removeWishlist($ref);
        }

        $this->get('by.user')->save($user);

        $refs = $user->getWishlist();

        $count = 0;
        if(!empty($refs)){
            $cars = $this->get('by.car')->findFromWishlist($refs);
            if($cars)
                $count = count($cars);
        }

        return new JsonResponse([
            'count'    => $count,
            'success'  => true
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/delete-wishlist/{id}", name="api_user_delete_wishlist")
     * @Method("POST")
     */
    public function deleteWishlistAction(Request $request, User $user)
    {
        $user->deleteWishlist();
        $this->get('by.user')->save($user);

        return new JsonResponse([
            'success' => true
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/get-wishlist/{id}/{type}", name="api_user_get_wishlist", defaults={"type": "car"})
     * @Method("POST")
     */
    public function getWishlistAction(Request $request, User $user, $type)
    {
        $refs = $user->getWishlist();

        if( $type == "car" ){
            $wishlist = array('count'=> 0, 'cars' => array());
            if(!empty($refs)){
                $cars = $this->get('by.car')->findFromWishlist($refs);
                $wishlist = array();

                if($cars){
                    $dateNow = new \DateTime();

                    /** @var Result $value */
                    foreach ($cars as $key => $car) {
                        $car = $this->container->get('by.transform')->carTransform($car);

                        // Age since production date, in months
                        if (isset($car['productionDate'])) {
                            $dateDiff = $dateNow->diff($car['productionDate']);
                            $dateDiff = $dateDiff->format('%y') * 12 + $dateDiff->format('%m');
                            $car['sellAge'] = $dateDiff;
                        }

                        $cars[$key] = $car;
                    }

                    $wishlist['count'] = count($cars);
                    $wishlist['cars']  = $cars;
                }
            }
            return new JsonResponse([
                'wishlist' => $wishlist,
                'success'  => true
            ]);
        }elseif($type == 'json'){
            return new JsonResponse([
                'wishlist' => $refs,
                'success'  => true
            ]);
        }elseif($type == 'count'){
            $count = 0;
            if(!empty($refs)){
                $cars = $this->get('by.car')->findFromWishlist($refs);

                if($cars)
                    $count = count($cars);
            }
            return new JsonResponse([
                'count'    => $count,
                'success'  => true
            ]);
        }

        return new JsonResponse([
            'errors'  => 'wrong type'
        ]);
    }

    /**
     * @param Request $request
     * @return JsonResponse
     *
     * @Route("/find-wishlist-pricedown", name="api_user_get_wishlist_pricedoawn")
     * @Method("GET")
     */
    public function getWishlistPriceDown(Request $request)
    {
        $cars  = $this->get('by.car')->findPriceDown();
        $carRefs = array();
        $users = array();
        $data = array();

        if(!empty($cars)){
            foreach($cars as $car){
                $carRefs[] = $car->getVoBaseReference();
                $c = $this->get('by.car')->findOne($car->getVoBaseReference());
                $carInfo[$car->getVoBaseReference()] = $this->get('by.car')->getDataForWeb($c, $this->createForm(ContactType::class));
                $car->setPriceDown(false);
            }
            $this->get('by.car')->saveMany($cars, true);
            unset($cars);

            // $cars = $this->get('by.car')->findSeveral($carRefs);
            // foreach($cars as $car){
            //     $carInfo[$car->voBaseReference] = $this->get('by.car')->getDataForWeb($car, $this->createForm(ContactType::class))['car'];
            // }

            $users = $this->get('by.user')->findAllWishlist();
            $i = 0;
            foreach($users as $user){
                $data[$i]['user'] = array(
                    'firstname' => $user->getFirstName(),
                    'lastname' => $user->getLastName(),
                    'email' => $user->getEmail(),
                    'gender' => $user->getGender(),
                );
                foreach($user->getWishlist() as $wish){
                    if(isset($carInfo[$wish]))
                        $data[$i]['cars'][] = $carInfo[$wish]['car'];
                }
                $i++;
            }
        }
        return new JsonResponse([
            'data' => $data,
            'success' => true
        ]);
    }

}
